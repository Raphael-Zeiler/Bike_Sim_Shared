/*
 * Copyright (C) 2012-2021 Motion Systems
 * 
 * This file is part of ForceSeat motion system.
 *
 * www.motionsystems.eu
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

using System;
using System.Runtime.InteropServices;

namespace MotionSystems
{
	///
	/// This structure defines special effects that are generated by the hardware and are independed to
	/// the primary telemetry or positioning data stream. Not all devices support this feature.
	///
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct FSMI_SFX
	{
		// Put here sizeof(FSMI_SFX).
		// NOTE: This field is mandatory.
		public byte structSize;

		// Number of the effects specified in the below filed. From 0 to FSMI_SFX_MaxEffectsCount.
		public byte effectsCount;

		// Effect type. It is one of FSMI_SFX_EffectType.
		public byte effect1Type;

		// Area where the effect should be generated. It is combination of FSMI_SFX_AreaFlags.
		public ushort effect1Area;

		// Frequency (Hz) of the effect, from 0 to 255. Not all effects support all frequencies.
		// - SinusL2: 0 to 100
		// - SinusL3: 0 to 100
		// - SinusL4: 0 to 100
		public byte effect1Frequency;

		// Amplitude of the effect, from -1 to 1. Not all effects support full amplitudes.
		// - SinusL2: -0.12 to 0.12
		// - SinusL3: -0.12 to 0.12
		// - SinusL4: -0.12 to 0.12
		public float effect1Amplitude;

		// For future use
		public byte effect1Reserved1;
		public byte effect1Reserved2;
		public byte effect1Reserved3;
		public byte effect1Reserved4;
		public byte effect1Reserved5;
		public byte effect1Reserved6;
		public byte effect1Reserved7;
		public byte effect1Reserved8;

		// Effect type. It is one of FSMI_SFX_EffectType.
		public byte effect2Type;

		// Area where the effect should be generated. It is combination of FSMI_SFX_AreaFlags.
		public ushort effect2Area;

		// Frequency (Hz) of the effect, from 0 to 255. Not all effects support all frequencies.
		// - SinusL2: 0 to 100
		// - SinusL3: 0 to 100
		// - SinusL4: 0 to 100
		public byte effect2Frequency;

		// Amplitude of the effect, from -1 to 1. Not all effects support full amplitudes.
		// - SinusL2: -0.12 to 0.12
		// - SinusL3: -0.12 to 0.12
		// - SinusL4: -0.12 to 0.12
		public float effect2Amplitude;

		// For future use
		public byte effect2Reserved1;
		public byte effect2Reserved2;
		public byte effect2Reserved3;
		public byte effect2Reserved4;
		public byte effect2Reserved5;
		public byte effect2Reserved6;
		public byte effect2Reserved7;
		public byte effect2Reserved8;

		// Effect type. It is one of FSMI_SFX_EffectType.
		public byte effect3Type;

		// Area where the effect should be generated. It is combination of FSMI_SFX_AreaFlags.
		public ushort effect3Area;

		// Frequency (Hz) of the effect, from 0 to 255. Not all effects support all frequencies.
		// - SinusL2: 0 to 100
		// - SinusL3: 0 to 100
		// - SinusL4: 0 to 100
		public byte effect3Frequency;

		// Amplitude of the effect, from -1 to 1. Not all effects support full amplitudes.
		// - SinusL2: -0.12 to 0.12
		// - SinusL3: -0.12 to 0.12
		// - SinusL4: -0.12 to 0.12
		public float effect3Amplitude;

		// For future use
		public byte effect3Reserved1;
		public byte effect3Reserved2;
		public byte effect3Reserved3;
		public byte effect3Reserved4;
		public byte effect3Reserved5;
		public byte effect3Reserved6;
		public byte effect3Reserved7;
		public byte effect3Reserved8;
		
		// Effect type. It is one of FSMI_SFX_EffectType.
		public byte effect4Type;

		// Area where the effect should be generated. It is combination of FSMI_SFX_AreaFlags.
		public ushort effect4Area;

		// Frequency (Hz) of the effect, from 0 to 255. Not all effects support all frequencies.
		// - SinusL2: 0 to 100
		// - SinusL3: 0 to 100
		// - SinusL4: 0 to 100
		public byte effect4Frequency;

		// Amplitude of the effect, from -1 to 1. Not all effects support full amplitudes.
		// - SinusL2: -0.12 to 0.12
		// - SinusL3: -0.12 to 0.12
		// - SinusL4: -0.12 to 0.12
		public float effect4Amplitude;

		// For future use
		public byte effect4Reserved1;
		public byte effect4Reserved2;
		public byte effect4Reserved3;
		public byte effect4Reserved4;
		public byte effect4Reserved5;
		public byte effect4Reserved6;
		public byte effect4Reserved7;
		public byte effect4Reserved8;
	}

	public enum FSMI_SFX_EffectType
	{
		// Effect is appended to the required position before trajectory generator uses the position.
		// It means that this effect affects state of the adaptive algorithms which are used to adjust motion platform
		// operation parameters to the signal dynamics. This effect might be also less pronounced if trajectory generator
		// is configured to use long acceleration ramps.
		// It is supported only by "PS" and "QS" motion platforms.
		SinusLevel2 = 0,

		// Effect is appended to the output (position) of the trajectory generator. It is NOT affected by the
		// trajectory generator configuration and it does NOT affect the adaptive algorithms. Result of this effect
		// might be different depending on the actuator hardware configuration (length/pitch).
		// It is supported only by "QS" motion platforms.
		SinusLevel3 = 1,

		// Effect is appended to the final motor torque. It is NOT affected by the trajectory generator and other
		// control subsystems. Result of this effect might be different depending on the actuator hardware
		// configuration (length/pitch).
		// It is supported only by "QS" motion platforms.
		SinusLevel4 = 2
	};

	public struct FSMI_SFX_AreaFlags
	{
		// Effect is generated on the actuator(s) assigned to the front-left area of the cockpit.
		public const int FrontLeft  = 1 << 0;

		// Effect is generated on the actuator(s) assigned to the front-right area of the cockpit.
		public const int FrontRight = 1 << 1;

		// Effect is generated on the actuator(s) assigned to the rear-left area of the cockpit.
		public const int RearLeft   = 1 << 2;

		// Effect is generated on the actuator(s) assigned to the rear-right area of the cockpit.
		public const int RearRight  = 1 << 3;

		// Effect is generated on auxiliary actuator, e.g. seat belt tensioner.
		public const int Aux1       = 1 << 4;

		// Effect is generated on auxiliary actuator, e.g. seat belt tensioner.
		public const int Aux2       = 1 << 5;
	};
}
